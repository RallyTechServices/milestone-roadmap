<!DOCTYPE html>
<html>
<head>
    <title>TS Milestone Roadmap</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Nov 09 2015 17:06:55 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Nov 09 2015 17:06:55 GMT-0800 (PST)";
        var CHECKSUM = 11775242791;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('TSUtilities',{
    singleton: true,
    logger: new Rally.technicalservices.Logger(),

    loadWSAPIItems: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        this.logger.log(config.model, "Loading with filters: ", Ext.clone(config.filters));
        
        var default_config = {
            fetch: ['ObjectID']
        };
        
        Ext.create('Rally.data.wsapi.Store', Ext.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }
});
/**
 *
 */
Ext.define('Rally.techservices.ColorSettingsField', {
    extend: 'Ext.form.field.Base',
    alias: 'widget.colorsettingsfield',
    plugins: ['rallyfieldvalidationui'],

    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: 600,
    cls: 'column-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The column settings value for this field
         */
        value: undefined
    },

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        this.callParent(arguments);

        this._store = Ext.create('Ext.data.Store', {
            fields: ['state', 'colorStateMapping'],
            data: []
        });

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            editingConfig: {
                publishMessages: false
            }
        });
        
        this._getStateField();
    },
    
    _getStateField: function() {
        var me = this;
        config = {
            model: 'TypeDefinition', 
            fetch: ["TypePath"],
            filters: [ { property:"Ordinal", operator:"=", value:0} ]
        };
        
        TSUtilities.loadWSAPIItems(config).then({
            scope: this,
            success: function(types) {
                var type = types[0];
                var type_path = type.get('TypePath');
                
                Rally.data.ModelFactory.getModel({
                    type: type_path,
                    success: function(model) {
                        var field = model.getField('State');
                        me.refreshWithNewField(field);
                    }
                });

            },
            failure: function(msg) {
                alert("Problem loading PI type: " + msg);
            }
        });
    },

    _getColumnCfgs: function() {
        var columns = [
            {
                text: 'State',
                dataIndex: 'state',
                emptyCellText: 'None',
                flex: 1
            },
            {
                text: 'Color',
                dataIndex: 'colorStateMapping',
                editor: {
                    xtype: 'rallytextfield',
                    flex: 1
//                    validator: function (value) {
//                        return (value === '' || (value > 0 && value <= 9999)) || 'WIP must be > 0 and < 9999.';
//                    },
//                    rawToValue: function (value) {
//                        return value === '' ? value : parseInt(value, 10);
//                    }
                }
            }
        ];

        return columns;
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode( this._buildSettingValue() );
        return data;
    },

    _buildSettingValue: function() {
        var columns = {};
        this._store.each(function(record) {
            columns[record.get('state')] = record.get('colorStateMapping');
        }, this);
        return columns;
    },

    getErrors: function() {
        var errors = [];
        if (this._storeLoaded && !Ext.Object.getSize(this._buildSettingValue())) {
            errors.push('At least one column must be shown.');
        }
        return errors;
    },

    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    },

    _getColumnValue: function(stateName) {
        var value = this._value;
        console.log("---", stateName, value);

        if ( Ext.isEmpty(value) ) {
            return null;
        }
        
        if ( Ext.isString(value) ) {
            value = Ext.JSON.decode(value);
        }
        
        if ( Ext.isString(value)[stateName] ) {
            return Ext.JSON.decode(value)[stateName];
        }

        return value[stateName];
    },

    refreshWithNewField: function(field) {
        delete this._storeLoaded;
        field.getAllowedValueStore().load({
            callback: function(records, operation, success) {
                var data = Ext.Array.map(records, this._recordToGridRow, this);
                
                this._store.loadRawData(data);
                this.fireEvent('ready');
                this._storeLoaded = true;
            },
            scope: this
        });
    },

    _recordToGridRow: function(allowedValue) {
        var stateName = allowedValue.get('StringValue');
        var pref = this._store.getCount() === 0 ? this._getColumnValue(stateName) : null;

        var column = { 
            state: stateName,
            colorStateMapping: ''
        };
        
        if (pref) {
            column.colorStateMapping = pref;
        }

        return column;

    }
});

/**
 * A grid that shows a roadmap.  Each row is a Rally project, each 
 * column is a month.  
 * 
 * The items that appear inside the cells has a milestone that falls into
 * the month and belongs to the project of the row.
 * 
 */
 
 Ext.define('Rally.technicalservices.RoadmapTable', {
    extend: 'Ext.Container',

    alias: 'widget.tsroadmaptable',

    /**
     * @property {String} cls The base class applied to this object's element
     */
    cls: "tsroadmap",

    config: {
        /**
         * @cfg {date} startDate 
         *
         * Monthly columns start with this date (defaults to today)
         */
        startDate: new Date(),
        /**
         * 
         * @cfg {Number} monthCount
         * Number of columns to show
         * 
         */
        monthCount: 3,
        /**
         * 
         * @cfg {Rally.data.Model} (reqd)
         * The model of items to display 
         */
        cardModel: null,
        /**
         * 
         * @cfg {object} 
         *     { state1: 'Platinum', state2: 'blue', default: 'Platinum' } 
         */
        stateColors: { 'defaultValue': 'Platinum' }
    },
    
    /**
     * @constructor
     * @param {Object} config
     */
    constructor: function (config) {
        this.mergeConfig(config);
        
        this.callParent([this.config]);
    },

    initComponent: function () {
        if ( Ext.isEmpty(this.cardModel) ) {
            console.error("Rally.technicalservices.RoadmapTable requires a model name for the cards");
            throw "Rally.technicalservices.RoadmapTable requires a model name for the cards";
        }
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {Rally.technicalservices.RoadmapTable} this
             * @param {Rally.ui.grid.Grid} grid
             */
            'gridReady'
        );
        var columns = this._getColumns();
        this._defineCustomModel(columns);
        
        var table_store = Ext.create('Rally.data.custom.Store',{ model: 'TSTableRow' });
        
        this.grid = this.add({ 
            xtype:'rallygrid', 
            store: table_store,
            columnCfgs: columns,
            showPagingToolbar : false,
            showRowActionsColumn : false,
            sortableColumns: false
        });
        
        this._loadCards();
    },
    
    _loadCards: function() {
        this.card_store = Ext.create('Rally.data.wsapi.Store',{
            model: 'Milestone',
            filters: [
                {property:'TargetDate', operator: '>=', value: Rally.util.DateTime.add(this.startDate, 'month', -1)},
                {property:'TargetDate', operator: '<=', value: Rally.util.DateTime.add(this.startDate, 'month', this.monthCount+1)}
            ],
            fetch: ['FormattedID', 'Name', 'Artifacts', 'ObjectID','TargetDate']
        });
                
        this.card_store.load({
            scope: this,
            callback : function(records, operation, successful) {
                if (successful){
                    this._updateRows(records, this.grid.getStore());
                } else {
                    console.log('Problem loading: ' + operation.error.errors.join('. '));
                    Ext.Msg.alert('Problem loading milestones', operation.error.errors.join('. '));
                }
            }
        });
    },

    _defineCustomModel: function(columns) {
        var me = this;
        
        var fields = Ext.Array.map(columns, function(column){
            var name = column.dataIndex;
            var type = 'object';
            if ( name == 'Project' ) { type = 'string'; }
            
            return { name: name, type: type };
        });
        
        Ext.define('TSTableRow', {
            extend: 'Ext.data.Model',
            fields: fields,
            
            addArtifact: function(artifact,milestone) {
                console.log("Adding artifact: ", artifact, milestone, this);
                var month = Ext.util.Format.date(milestone, 'F');
                if ( Ext.isEmpty(this.get(month)) ) {
                    this.set(month, [artifact.getData()]);
                } else {
                    var artifacts = this.get(month);
                    artifacts.push(artifact.getData());
                    this.set(month, artifacts);
                }
            }
        });
    },
    
    cardTemplate: new Ext.XTemplate(
        "<tpl for='.'>",
            "<div class='ts_card' style='background-color:{__StateColor};'>{Name}</div>",
        "</tpl>"
    ),
    
    getCellRenderer: function() {
        var me = this;
        return function(value, meta, record) {
            var card_items = me._setArtifactColor(value);
            return me.cardTemplate.apply(card_items);
        }
    },
    
    _getColumns: function() {
        var columns = [{
            dataIndex: 'Project',
            text: '',
            flex: 1
        }];
        
        var month_stamp = Rally.util.DateTime.add(new Date(), 'month', -1);
        
        var card_renderer = this.getCellRenderer();
        
        for ( var i=0; i<9; i++ ) {
            var month = Ext.util.Format.date(month_stamp, 'F');
            columns.push({
                dataIndex: month,
                text: month,
                flex: 1,
                renderer: card_renderer,
                align: 'center'
            });
            
            month_stamp = Rally.util.DateTime.add(month_stamp, 'month', 1);
        }
        
        return columns;
    },
    
    _updateRows: function(milestones, table_store) {
        var me = this;
        var promises = [];
        
        Ext.Array.each(milestones, function(milestone){
            var oid = milestone.get('ObjectID');
            var target_date = milestone.get('TargetDate');
            
            promises.push( function() { return me._loadArtifactsForMilestone(oid,target_date); } );
        });
        
        Deft.Chain.sequence(promises).then({
            scope: this,
            success: function(results) {
                var artifacts_by_milestone = {};
                Ext.Array.each(results, function(artifacts_by_a_milestone){
                    artifacts_by_milestone = Ext.apply(artifacts_by_milestone, artifacts_by_a_milestone);
                });
                
                var rows_by_project_oid = this._getRowsFromMilestoneHash(artifacts_by_milestone);
                
                Ext.Object.each( artifacts_by_milestone, function(milestone, artifacts) {
                    Ext.Array.each(artifacts, function(artifact){
                        var project_oid = artifact.get('Project').ObjectID;
                        rows_by_project_oid[project_oid].addArtifact(artifact,milestone);
                    });
                });
                table_store.loadRecords(Ext.Object.getValues(rows_by_project_oid));
                this.fireEvent('gridReady', this, this.grid);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading artifacts', msg);
            }
        });
    },
    
    _getRowsFromMilestoneHash: function(artifacts_by_milestone) {
        var rows_by_project_oid = {};
        
        Ext.Object.each( artifacts_by_milestone, function(milestone, artifacts){
            Ext.Array.each(artifacts, function(artifact) {
                var project_oid = artifact.get('Project').ObjectID;
                rows_by_project_oid[project_oid] = Ext.create('TSTableRow',{
                    Project: artifact.get('Project').Name
                });
            });
        });
        
        return rows_by_project_oid;
    },
    
    _setArtifactColor: function(artifacts) {
        var artifacts_with_color = [];
        Ext.Array.each(artifacts, function(artifact){
            if ( ! Ext.isEmpty(artifact) ) {
                var color = this.stateColors.defaultValue || 'Platinum';
                
                if ( artifact.State ) {
                    color = this.stateColors[artifact.State.Name] || this.stateColors.defaultValue || 'Platinum';
                } else {
                    color = this.stateColors[""] || this.stateColors.defaultValue || 'Platinum';
                }
                
                artifact.__StateColor = color;
                artifacts_with_color.push(artifact);
            }
        },this);
        
        return artifacts_with_color;
    },
    
    _loadArtifactsForMilestone: function(milestone_oid, milestone_date) {
        var deferred = Ext.create('Deft.Deferred');
        
        var config = {
            model: this.cardModel,
            fetch: ['FormattedID', 'Name', 'ObjectID','Project','State'],
            filters: [{property:'Milestones.ObjectID', operator: 'contains', value: milestone_oid}]
        };
        
        TSUtilities.loadWSAPIItems(config).then({
            scope: this,
            success: function(artifacts) {
                
                var artifacts_by_milestone = {};
                artifacts_by_milestone[milestone_date] = artifacts;
                deferred.resolve(artifacts_by_milestone);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });

        return deferred;
    }
    

});

Ext.define("TSMilestoneRoadmapApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    config: {
        defaultSettings: {
            colorStateMapping: {
                'defaultValue': 'Platinum',
                'Discovering': 'cyan'
            }
        }
    },
    
    items: [
        {xtype:'container', itemId:'selector_box', minHeight: 50},
        {xtype:'container', itemId: 'display_box'}
    ],
    // TODO
    integrationHeaders : {
        name : "TSMilestoneRoadmapApp"
    },
                        
    launch: function() {
        var me = this;
        this.setLoading("Loading milestones...");
        
        if ( this.down('tsroadmaptable') ) { this.down('tsroadmaptable').destroy(); }
        
        this._getAppropriatePIType().then({
            scope  : this,
            success: function(types) {
                this.setLoading('Loading items...');
                
                this.PortfolioItemType = types[0];
                this.logger.log('PI Type:', this.PortfolioItemType);
                
                var start_date = Rally.util.DateTime.add(new Date(), 'month', -1);
                var colors = this.getSetting('colorStateMapping');
                
                if ( Ext.isString(colors) ) { colors = Ext.JSON.decode(colors); }
                
                this.logger.log("Colors: ", colors);
                
                this.roadmap = this.down('#display_box').add({ 
                    xtype: 'tsroadmaptable',
                    startDate: start_date,
                    monthCount: 9,
                    stateColors: colors,
                    cardModel: this.PortfolioItemType.get('TypePath'),
                    listeners: {
                        gridReady: function() {
                            me.setLoading(false);
                        }
                    }
                });
                
                
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading PI Type Names', msg);
            }
        });
    },
    
    _getCardboardConfig: function() {
        return {
            types: [this.PortfolioItemType.get('TypePath')],
            attribute: 'State',
            columnConfig: {
                xtype: 'tsmilestonecolumn'
            }
        };
    },
    
    _getAppropriatePIType: function() {
        var config = {
            model: 'TypeDefinition', 
            fetch: ["TypePath"],
            filters: [ { property:"Ordinal", operator:"=", value:1} ]
        };
        
        return TSUtilities.loadWSAPIItems(config);
    },
    
    _displayGrid: function(store,field_names){
        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: field_names
        });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        
        //Ext.apply(this, settings);
        this.launch();
    },
    
    getSettingsFields: function() {
        var me = this;
        
        return [
        {
            name: 'colorStateMapping',
            readyEvent: 'ready',
            fieldLabel: 'Colors by State',
            margin: '5px 0 0 30px',
            xtype: 'colorsettingsfield',
            handlesEvents: {
                fieldselected: function(field) {
                    this.refreshWithNewField(field);
                }
            },
            listeners: {
                ready: function() {
                    this.fireEvent('colorsettingsready');
                }
            },
            bubbleEvents: 'colorsettingsready'
        }];
    }
});

            
               Rally.launchApp('TSMilestoneRoadmapApp', {
                   name: 'TS Milestone Roadmap'
               });
        });
    </script>
    
    <style type="text/css">

div.ts_card {
    margin: 2px;
    padding: 2px;
    text-align: center;
    font-size: 9px;
    border: 1px solid black !important;
    box-shadow: 3px 3px grey !important;
}
    </style>

</head>
<body></body>
</html>